{"version":3,"sources":["Join.js","Message.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["Join","useState","party","setParty","name","setName","Form","className","Group","as","Row","controlId","Control","type","placeholder","value","onChange","e","target","to","Button","variant","Message","socket","text","user","ReactEmoji","emojify","Chat","location","messages","setMessages","message","setMessage","ENDPOINT","useEffect","queryString","parse","search","io","emit","off","on","msgcom","map","msg","index","key","FormControl","onKeyPress","preventDefault","sendMessage","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e420e188.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport './Join.css';\nimport {Link} from 'react-router-dom'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nfunction Join() {\n\tconst [party, setParty] = useState('');\n\tconst [name, setName] = useState('')\n\treturn (\n\t\t\t<Form className='container'>\n\t\t\t\t<h1 className='join__brand'>\n\t\t\t\t\tHangout\n\t\t\t\t</h1>\n\t\t\t\t<div className='join__form'>\n\t\t\t\t<Form.Group as={Row} controlId=\"name\" className=''>\n\t\t\t\t\t    <Form.Control className='join__input' type=\"text\" placeholder=\"Enter Name\" value={name} onChange={(e)=>setName(e.target.value)}/>\n\t\t\t\t</Form.Group>\n\t\t\t\t<Form.Group as={Row} controlId=\"party\" className=''>\n\t\t\t\t\t<Form.Control className='join__input' type=\"text\" placeholder=\"Enter Party Name\" value={party} onChange={(e)=>setParty(e.target.value)}/>\n\t\t\t\t</Form.Group>\n\t\t\t\t<Link to={`/chat?name=${name}&party=${party}`}>\n\t\t\t\t\t<Button className='w-100 join__button' variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\t    \tJoin\n\t\t\t\t\t</Button>\n\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</Form>\n\t)\n}\n\nexport default Join","import React from 'react'\nimport ReactEmoji from 'react-emoji'\nfunction Message({text,user}) {\n\treturn (\n\t\t<div>\n\t\t\t<strong><em>{user} </em></strong>: {ReactEmoji.emojify(text)}\n\t\t</div>\n\t)\n}\n\nexport default Message","import React,{useState,useEffect} from 'react'\nimport queryString from 'query-string'\nimport io from 'socket.io-client'\nimport Message from './Message'\nimport './Chat.css'\nimport FormControl from 'react-bootstrap/FormControl'\nlet socket;\n\nfunction Chat({location}) {\n\tconst [name, setName] = useState('');\n\tconst [party, setParty] = useState('');\n\tconst [messages, setMessages] = useState([]);\n\tconst [message, setMessage] = useState('')\n\tconst ENDPOINT = 'https://hangout-backend.herokuapp.com/'\n\tuseEffect(() => {\n\t\tconst {name,party} = queryString.parse(location.search);\n\n\t\tsocket=io(ENDPOINT);\n\n\t\tsetName(name);\n\t\tsetParty(party);\n\t\t\n\t\tsocket.emit('join',{name,party},()=>{});\n\n\t\treturn() =>{\n\t\t\tsocket.emit('disconnect');\n\t\t\tsocket.off();\n\t\t}\n\t},[ENDPOINT,location.search])\n\n\tuseEffect(() => {\n\t\tsocket.on('message',(message)=>{\n\t\t\tsetMessages([...messages,message]);\n\t\t})\n\t}, [messages])\n\n\tconst sendMessage = (e) =>{\n\t\te.preventDefault();\n\t\tif(message){\n\t\t\tsocket.emit('sendMessage',message,()=>setMessage(''));\n\t\t}\n\t}\n\n\tlet msgcom = messages.map((msg,index) => <Message key={index} user={msg.user} text={msg.text}/>);\n\n\treturn (\n\t\t\t<div className='container'>\n\t\t\t\t<div>\n\t\t\t\t{msgcom}\n\t\t\t\t</div>\n\t\t\t\t<FormControl \n\t\t\t\t\tclassName='w-100'\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={message}\n\t\t\t\t\tonChange={(e)=>setMessage(e.target.value)}\n\t\t\t\t\tonKeyPress={e=>e.key==='Enter'?sendMessage(e):null}/>\n\t\t\t</div>\n\t)\n}\n\nexport default Chat","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Join from './Join'\nimport Chat from './Chat'\nimport {BrowserRouter as Router, Route, Redirect} from 'react-router-dom'\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Router>\n        <Route path=\"/\"> <Redirect to=\"/join\" /></Route>\n        <Route path=\"/join\" component={Join}/>\n        <Route path=\"/chat\" exact component={Chat}/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}